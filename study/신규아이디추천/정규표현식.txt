1. 함수
match() :   문자열의 처음부터 정규식과 매치되는지 여부      | 매치된 객체 or None 반환
search() :  문자열 전체를 검색하여 정규식과 매치되는 여부   | 매치된 객체 or None 반환
findall() : 정규식과 매치되는 모든 문자열을 찾음            | 리스트 반환
finditer() : 정규식과 매치되는 모든 문자열을 반복가능한 객체(?) | 모든 문자열을 반복가능한 객체로 돌려준다는데 어떻게 돌려주는 걸까?
sub() : 매치되는 문자를 바꿈

* 패턴.함수( 타겟 String )

ex) result = re.match('[a-z]+', "3 python);
    

2. 패턴
[a-zA-Z] : 알파벳 모두
[0-9] : 숫자
[^0-9] : 숫자가 아닌 모든 문자

\d : 모든 숫자, [0-9] 와 동일 표현
\D : 숫자가 아닌 것 , [^ 0-9]와 동일 표현
\s : whitespace 문자와 매치, [\t\n\r\f\v]와 동일 표현
\S : whitespace가 아닌 문자와 매치 , [^\t\n\r\f\v]와 동일 표현
\w : 알파벳 + 숫자 와 매치 , [a-zA-Z0-9_]와 동일 표현 
\W : 알파벳 + 숫자가 아닌 객체와 매치 , [ ^a-zA-Z0-9_ ]와 동일 표현

< DOT(.) >
: 줄바꿈( \n )을 제외한 모든 문자와 매치

ex)
    abc.def => abc + "모은 문자" + def
    abc[.]def => abc + "." + def

< 반복(*) >
: 바로 앞 문자가 0~무한대로 반복 될 수 있다는 의미

ex )
    re.match('ca*t', 'ct' )  => 매치 됨
    re.match('ca*t', 'cat' )  => 매치 됨
    re.match('ca*t', 'caaaat' )  => 매치 됨

< 반복(+) >
: 바로 앞 문자가 1~무한번 반복 될 수 있다는 의미

ex )
    re.match('ca+t', 'ct' )  => 매치 안 됨
    re.match('ca+t', 'cat' )  => 매치 됨
    re.match('ca+t', 'caaaat' )  => 매치 됨

< 반복( {n, m} )>
: 바로 앞 문자가 n~m번 반복 될 수 있다는 의미

ex )
    re.match('ca{3}t', 'cat' )  => 매치 안 됨
    re.match('ca{3}t', 'caaaaat' )  => 매치 됨
    re.match('ca{3,5}t', 'caaaat' )  => 매치 됨
    re.match('ca{3,5}t', 'caaaaaaat' )  => 매치 안 됨

< ? >
: 한 번 쓰여도 되고 안쓰여도 된다를 의미. {0, 1} 과 의미 같음.

ex )
    re.match( 'ab?c', 'ac') => 매치 됨 
    re.match( 'ab?c, 'abc' ) => 매치 됨
    re.match( 'ab?c, 'abbc' ) => 매치 안 됨